$(document).bind('mobileinit',function(){
  $.mobile.changePage.defaults.changeHash = false;
  $.mobile.hashListeningEnabled = false;
  $.mobile.pushStateEnabled = false;
});
window.addEventListener('load', function() {
  if (localStorage.disclaimer && localStorage.go) {
    $("#splash-content").remove()
    $("#map-page").fadeIn(500, initMap)
  }
})
if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('sw.js').then(function(registration) {
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}
$(document).ready(function() {
  $("[name=disclaimer]").on('click', function(){
    localStorage.setItem("disclaimer","ok")
    $(".blk1").fadeOut(500, function(){
      $(this).remove()
      $(".blk2").fadeIn(500)
    })
  })
  $("[name=okGo]").on('click', function(){
    localStorage.setItem("go","ok")
    $("#splash-content").fadeOut(500, function(){
      $(this).remove()
      $("#map-page").fadeIn(500, initMap)
    })
  })
});

function initMap(){
  let punti;
  let sentieri;
  map = new L.Map('map', { minZoom: 13 }).setView([46.1220, 11.1876], 13);
  lyr = L.tileLayer('map/basemap/{z}/{x}/{y}.png', {tms: true, opacity: 0.7, attribution: 'base map tiles generated by <a href="http://www.klokan.cz/projects/gdal2tiles/">GDAL2Tiles</a>'}).addTo(map);

  legend = L.Control.extend({
    options: { position: 'topright'},
    onAdd: function (map) {
      var container = L.DomUtil.create('div', 'legend');
      title = $("<p/>",{text:'Sentieri', class:'p-0 mb-1 border-bottom'})
      .appendTo(container)
      .on('click', function(){
        list.slideToggle(250)
        $(this).find('i').toggleClass('flip');
      })
      $("<i/>",{class:'fas fa-angle-up fa-lg float-right animation'}).appendTo(title)
      list = $("<ul/>",{id:'sentieri-legend'}).appendTo(container);
      return container;
    }
  })
  startView = L.Control.extend({
    options: { position: 'topleft'},
    onAdd: function (map) {
      var container = L.DomUtil.create('div', 'extentControl leaflet-bar leaflet-control leaflet-touch');
      btn=$("<a/>",{href:'#'}).appendTo(container);
      $("<i/>",{class:'fas fa-home'}).appendTo(btn)
      btn.on('click', function () {map.fitBounds(punti.getBounds());});
      return container;
    }
  })

  map.addControl(new legend());
  map.addControl(new startView());

  $.getJSON('json/punti.geojson',function (data) {
    if (!data.features) {
      map.setView(new L.LatLng(46.1220, 11.1876), 13);
    }else {
      punti = L.geoJSON(data).addTo(map).on('click',slidePanel);
      map.fitBounds(punti.getBounds());
    }
  });

  $.getJSON('json/sentieri.geojson',function (data) {
    $.each(data.features, function(i,v){
      p = v.properties
      li = $("<li/>",{text:p.nome+" ("+p.km+" km.)"}).appendTo('#sentieri-legend')
      $("<i/>",{class:'fas fa-minus fa-lg pr-2'}).css("color",p.color).prependTo(li)
    })
    sentieri = L.geoJSON(data,{
      style: function(feature) { return {color: feature.properties.color} }
    }).addTo(map).on('click',slideTrackInfo);
  });

  map.setMaxBounds(map.getBounds());
}
function slidePanel(e){
  prop = e.layer.feature.properties
  console.log(prop);
  $(".closePanel>h5").html(prop.nome)
  $(".poi-banner").css("background-image","url('img/poi/banner/"+prop.banner+"')")
  content = $(".poi-content").html(prop.desc)
  $('#wrapPoiInfo').fadeIn(500)
  $("body").on('click', '.closePanel', function() { $('#wrapPoiInfo').fadeOut(500); });
  if (prop.slider === 'si') {initSlider()}
}
function slideTrackInfo(e){
  prop = e.layer.feature.properties
  $(".closeTrackPanel>h5").html(prop.nome)
  $(".track-banner").css("background-image","url('img/sentieri/banner/"+prop.banner+"')")
  $('#wrapTrackInfo').fadeIn(500)
  $("body").on('click', '.closeTrackPanel', function() { $('#wrapTrackInfo').fadeOut(500); });
}

function initSlider(){
  var dragging = false, scrolling = false, resizing = false;
  var slider = $('.slider');
  slider.html('')
  bg = $("<img/>",{src:'img/poi/slider/'+slider.data('bg')}).appendTo(slider)
  bgLabel = $("<span/>",{class:'cd-image-label firstLab',text:slider.data('altbg')}).attr('data-type','original').appendTo(slider)
  divMask = $("<div/>",{class:'cd-resize-img'}).appendTo(slider)
  mask = $("<img/>",{src:'img/poi/slider/'+slider.data('mask')}).appendTo(divMask)
  maskLabel = $("<span/>",{class:'cd-image-label lastLab',text:slider.data('altmask')}).attr('data-type','modified').appendTo(divMask)
  handle = $("<span/>",{class:'cd-handle'}).appendTo(slider)

  checkPosition(slider);
  $(window).on('scroll', function(){
    if( !scrolling) {
      scrolling =  true;
      ( !window.requestAnimationFrame )
      ? setTimeout(function(){checkPosition(slider);}, 100)
      : requestAnimationFrame(function(){checkPosition(slider);});
    }
  });

  slider.each(function(){
    var actual = $(this);
    drags(actual.find('.cd-handle'), actual.find('.cd-resize-img'), actual, actual.find('.cd-image-label[data-type="original"]'), actual.find('.cd-image-label[data-type="modified"]'));
  });

  //upadate images label visibility
  $(window).on('resize', function(){
    if( !resizing) {
      resizing =  true;
      ( !window.requestAnimationFrame )
      ? setTimeout(function(){checkLabel(slider);}, 100)
      : requestAnimationFrame(function(){checkLabel(slider);});
    }
  });

}
function checkPosition(container) {
  container.each(function(){
    var actualContainer = $(this);
    if( $(window).scrollTop() + $(window).height()*0.5 > actualContainer.offset().top) {
      actualContainer.addClass('is-visible');
    }
  });
  scrolling = false;
}

function checkLabel(container) {
  container.each(function(){
    var actual = $(this);
    updateLabel(actual.find('.cd-image-label[data-type="modified"]'), actual.find('.cd-resize-img'), 'left');
    updateLabel(actual.find('.cd-image-label[data-type="original"]'), actual.find('.cd-resize-img'), 'right');
  });
  resizing = false;
}
function updateLabel(label, resizeElement, position) {
  if(position == 'left') {
    ( label.offset().left + label.outerWidth() < resizeElement.offset().left + resizeElement.outerWidth() )
    ? label.removeClass('is-hidden')
    : label.addClass('is-hidden') ;
  } else {
    (label.offset().left > resizeElement.offset().left + resizeElement.outerWidth())
    ? label.removeClass('is-hidden')
    : label.addClass('is-hidden') ;
  }
}

function drags(dragElement, resizeElement, container, labelContainer, labelResizeElement) {
  dragElement.on("mousedown vmousedown", function(e) {
    dragElement.addClass('draggable');
    resizeElement.addClass('resizable');
    var dragWidth = dragElement.outerWidth()
    var xPosition = dragElement.offset().left + dragWidth - e.pageX
    var containerOffset = container.offset().left
    var containerWidth = container.outerWidth()
    var minLeft = containerOffset + 10
    var maxLeft = containerOffset + containerWidth - dragWidth - 10

    dragElement.parents().on("mousemove vmousemove", function(e) {
      if( !dragging) {
        dragging =  true;
        ( !window.requestAnimationFrame )
        ? setTimeout(function(){
          animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement);
        }, 100)
        : requestAnimationFrame(function(){
          animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement);
        });
      }
    }).on("mouseup vmouseup", function(e){
      dragElement.removeClass('draggable');
      resizeElement.removeClass('resizable');
    });
    e.preventDefault();
  }).on("mouseup vmouseup", function(e) {
    dragElement.removeClass('draggable');
    resizeElement.removeClass('resizable');
  });
}

function animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement) {
  var leftValue = e.pageX + xPosition - dragWidth;
  //constrain the draggable element to move inside his container
  if(leftValue < minLeft ) {
    leftValue = minLeft;
  } else if ( leftValue > maxLeft) {
    leftValue = maxLeft;
  }
  var widthValue = (leftValue + dragWidth/2 - containerOffset)*100/containerWidth+'%';
  $('.draggable').css('left', widthValue).on("mouseup vmouseup", function() {
    $(this).removeClass('draggable');
    resizeElement.removeClass('resizable');
  });
  $('.resizable').css('width', widthValue);

  updateLabel(labelResizeElement, resizeElement, 'left');
  updateLabel(labelContainer, resizeElement, 'right');
  dragging =  false;
}
